# DocumentaÃ§Ã£o dos CÃ³digos do DiretÃ³rio GraphQL

---

## nginx-ingress/ingress.yaml

Caminho: tcc2/manifests/graphql/nginx-ingress/ingress.yaml

```
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: graphql-echo-ingress
  namespace: graphql
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: graphql.localtest.me
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: graphql-echo
            port:
              number: 9000
```

---

## nginx-apigw/service.yaml

Caminho: tcc2/manifests/graphql/nginx-apigw/service.yaml

```
apiVersion: v1
kind: Service
metadata:
  name: nginx-apigw-graphql
  namespace: graphql
spec:
  type: NodePort
  selector:
    app: nginx-apigw-graphql
  ports:
    - port: 80
      targetPort: 80
      nodePort: 30701
```

---

## nginx-apigw/deployment.yaml

Caminho: tcc2/manifests/graphql/nginx-apigw/deployment.yaml

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-apigw-graphql
  namespace: graphql
  labels:
    app: nginx-apigw-graphql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-apigw-graphql
  template:
    metadata:
      labels:
        app: nginx-apigw-graphql
    spec:
      containers:
        - name: nginx-apigw-graphql
          image: nginx:1.25-alpine
          resources:
            requests:
              cpu: "10m"
              memory: "32Mi"
            limits:
              cpu: "100m"
              memory: "128Mi"
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-conf
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-conf
          configMap:
            name: nginx-apigw-graphql-conf
```

---

## nginx-apigw/configmap.yaml

Caminho: tcc2/manifests/graphql/nginx-apigw/configmap.yaml

```
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-apigw-graphql-conf
  namespace: graphql
  labels:
    app: nginx-apigw-graphql
data:
  nginx.conf: |
    events {}
    http {
      server {
        listen 80;
        server_name graphql.localtest.me;

        location / {
          proxy_pass http://graphql-echo:9000;
          proxy_http_version 1.1;
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
        }
      }
    }
```

---

## app/deployment.yaml

Caminho: tcc2/manifests/graphql/app/deployment.yaml

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: graphql-echo
  namespace: graphql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: graphql-echo
  template:
    metadata:
      labels:
        app: graphql-echo
    spec:
      containers:
      - name: graphql-echo
        image: local/graphql-echo:latest
        imagePullPolicy: Never
        ports:
          - containerPort: 9000
        resources:
          requests:
            cpu: "10m"
            memory: "32Mi"
          limits:
            cpu: "100m"
            memory: "128Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: graphql-echo
  namespace: graphql
spec:
  selector:
    app: graphql-echo
  ports:
    - protocol: TCP
      port: 9000
      targetPort: 9000
```

---

## app/package.json

Caminho: tcc2/manifests/graphql/app/package.json

```
{
  "name": "graphql-echo",
  "version": "1.0.0",
  "description": "Simple GraphQL Echo Server",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "@apollo/server": "^4.9.5",
    "graphql": "^16.8.1"
  }
}
```

---

## app/server.js

Caminho: tcc2/manifests/graphql/app/server.js

```
const { ApolloServer } = require('@apollo/server');
const { startStandaloneServer } = require('@apollo/server/standalone');

// Schema definition
const typeDefs = `
  type Echo {
    message: String
    timestamp: String
  }

  type Query {
    hello: String
    echo(message: String!): Echo
  }
`;

// Resolver functions
const resolvers = {
  Query: {
    hello: () => 'Hello from GraphQL!',
    echo: (_, { message }) => ({
      message,
      timestamp: new Date().toISOString()
    }),
  },
};

// Create Apollo Server
const server = new ApolloServer({
  typeDefs,
  resolvers,
});

// Start server
async function startServer() {
  const { url } = await startStandaloneServer(server, {
    listen: { port: 9000 }
  });
  
  console.log(`ðŸš€ GraphQL server ready at ${url}`);
}

startServer();
```

---

## app/Dockerfile

Caminho: tcc2/manifests/graphql/app/Dockerfile

```
FROM node:18-alpine

WORKDIR /app

COPY server.js package.json ./

RUN npm install

EXPOSE 9000

CMD ["node", "server.js"]
``` 